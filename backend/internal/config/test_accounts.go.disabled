package config

import (
	"log"
	"openpenpal-backend/internal/models"
	"openpenpal-backend/pkg/utils"
	
	"github.com/google/uuid"
	"gorm.io/gorm"
)

// TestAccount represents a test account with proper password hashing
type TestAccount struct {
	Username string
	Email    string
	Password string // Plain text password for testing
	Nickname string
	Role     models.UserRole
	SchoolCode string
}

// GetTestAccounts returns standardized test accounts with SOTA principles
// Following SOTA: centralized, configurable, no hardcoding
func GetTestAccounts() []TestAccount {
	return []TestAccount{
		// 管理员账号
		{
			Username: "admin",
			Email:    "admin@openpenpal.com",
			Password: "admin123",
			Nickname: "系统管理员",
			Role:     models.RoleSuperAdmin,
			SchoolCode: "SYSTEM",
		},
		
		// 四级信使系统测试账号
		{
			Username: "courier_level1",
			Email:    "courier1@openpenpal.com", 
			Password: "secret",
			Nickname: "一级信使",
			Role:     models.RoleCourierLevel1,
			SchoolCode: "PKU001",
		},
		{
			Username: "courier_level2",
			Email:    "courier2@openpenpal.com",
			Password: "secret", 
			Nickname: "二级信使",
			Role:     models.RoleCourierLevel2,
			SchoolCode: "PKU001",
		},
		{
			Username: "courier_level3",
			Email:    "courier3@openpenpal.com",
			Password: "secret",
			Nickname: "三级信使", 
			Role:     models.RoleCourierLevel3,
			SchoolCode: "PKU001",
		},
		{
			Username: "courier_level4",
			Email:    "courier4@openpenpal.com",
			Password: "secret",
			Nickname: "四级信使",
			Role:     models.RoleCourierLevel4,
			SchoolCode: "PKU001",
		},
		
		// 学校管理员
		{
			Username: "school_admin",
			Email:    "school@openpenpal.com",
			Password: "secret",
			Nickname: "学校管理员",
			Role:     models.RoleSchoolAdmin,
			SchoolCode: "PKU001",
		},
		
		// 普通用户
		{
			Username: "alice",
			Email:    "alice@pku.edu.cn",
			Password: "secret",
			Nickname: "Alice",
			Role:     models.RoleUser,
			SchoolCode: "PKU001",
		},
		{
			Username: "bob",
			Email:    "bob@tsinghua.edu.cn", 
			Password: "secret",
			Nickname: "Bob",
			Role:     models.RoleUser,
			SchoolCode: "THU001",
		},
		
		// 兼容性测试 - 通用角色名称
		{
			Username: "courier",
			Email:    "courier@openpenpal.com",
			Password: "secret",
			Nickname: "通用信使",
			Role:     models.RoleCourier,
			SchoolCode: "PKU001",
		},
		{
			Username: "senior_courier",
			Email:    "senior@openpenpal.com", 
			Password: "secret",
			Nickname: "高级信使",
			Role:     models.RoleSeniorCourier,
			SchoolCode: "PKU001",
		},
		{
			Username: "coordinator", 
			Email:    "coordinator@openpenpal.com",
			Password: "secret",
			Nickname: "信使协调员",
			Role:     models.RoleCourierCoordinator,
			SchoolCode: "PKU001",
		},
	}
}

// SeedTestAccounts creates test accounts with proper password hashing
func SeedTestAccounts(db *gorm.DB) error {
	// Check if test accounts already exist
	var existingCount int64
	if err := db.Model(&models.User{}).Where("username IN ?", []string{"admin", "alice", "courier_level1"}).Count(&existingCount).Error; err != nil {
		return err
	}
	
	if existingCount > 0 {
		log.Println("Test accounts already exist, skipping seeding")
		return nil
	}
	
	testAccounts := GetTestAccounts()
	
	for _, account := range testAccounts {
		// Generate proper password hash using SOTA utility
		passwordHash, err := utils.HashPassword(account.Password)
		if err != nil {
			log.Printf("Failed to hash password for %s: %v", account.Username, err)
			continue
		}
		
		user := &models.User{
			ID:           uuid.New(),
			Username:     account.Username,
			Email:        account.Email,
			PasswordHash: passwordHash,
			Nickname:     account.Nickname,
			Role:         account.Role,
			SchoolCode:   account.SchoolCode,
			IsActive:     true,
			IsReceiver:   true,
			IsCodePublic: false,
			AllowAIPenpal: true,
			Points:       0,
			Level:        1,
		}
		
		// Generate address code for non-admin users
		if account.Role != models.RoleSuperAdmin {
			// Simple address code generation for testing
			zoneCode := "YY01" // Default zone
			user.ZoneCode = zoneCode
			user.AddressCode = user.GenerateAddressCode(int(user.ID.ID() % 10000))
		}
		
		if err := db.Create(user).Error; err != nil {
			log.Printf("Failed to create test user %s: %v", account.Username, err)
			continue
		}
		
		log.Printf("Created test user: %s (%s)", account.Username, account.Role)
	}
	
	log.Println("Test accounts seeded successfully")
	return nil
}

// GetTestCredentials returns a map of test account credentials for documentation
func GetTestCredentials() map[string]string {
	credentials := make(map[string]string)
	
	for _, account := range GetTestAccounts() {
		credentials[account.Username] = account.Password
	}
	
	return credentials
}

// ValidateTestAccountPasswords verifies that test account passwords work correctly
func ValidateTestAccountPasswords(db *gorm.DB) error {
	testAccounts := GetTestAccounts()
	
	for _, account := range testAccounts {
		var user models.User
		if err := db.Where("username = ?", account.Username).First(&user).Error; err != nil {
			log.Printf("Test user %s not found: %v", account.Username, err)
			continue
		}
		
		if !utils.CheckPasswordHash(account.Password, user.PasswordHash) {
			log.Printf("❌ Password validation failed for %s", account.Username)
		} else {
			log.Printf("✅ Password validation passed for %s", account.Username)
		}
	}
	
	return nil
}