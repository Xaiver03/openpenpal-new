package services

import (
	"testing"

	"openpenpal-backend/internal/config"
	"openpenpal-backend/internal/models"

	"github.com/stretchr/testify/suite"
	"gorm.io/gorm"
)

// CourierServiceTestSuite 信使服务测试套件
type CourierServiceTestSuite struct {
	suite.Suite
	db             *gorm.DB
	courierService *CourierService
	userService    *UserService
	testUser       *models.User
	testCourier    *models.User
	config         *config.Config
}

func (suite *CourierServiceTestSuite) SetupSuite() {
	// 设置测试数据库
	db, err := config.SetupTestDB()
	suite.NoError(err)
	suite.db = db

	// 获取测试配置
	suite.config = config.GetTestConfig()

	// 创建服务
	suite.userService = NewUserService(db, suite.config)
	suite.courierService = NewCourierService(db)

	// 创建测试用户
	suite.testUser = config.CreateTestUser(db, "courieruser", models.RoleUser)
	suite.testCourier = config.CreateTestUser(db, "courier_level1", models.RoleCourierLevel1)
}

func (suite *CourierServiceTestSuite) TearDownTest() {
	// 清理测试数据
	suite.db.Exec("DELETE FROM couriers")
	suite.db.Exec("DELETE FROM courier_tasks")
}

// TestApplyCourier_Success 测试成功申请信使
func (suite *CourierServiceTestSuite) TestApplyCourier_Success() {
	req := &models.CourierApplication{
		Name:            "测试信使",
		Contact:         "test@example.com",
		School:          "北京大学",
		Zone:            "BJDX",
		HasPrinter:      "yes",
		SelfIntro:       "我想帮助同学传递信件",
		CanMentor:       "maybe",
		WeeklyHours:     10,
		MaxDailyTasks:   5,
		TransportMethod: "walk",
		TimeSlots:       []string{"morning", "afternoon"},
	}

	courier, err := suite.courierService.ApplyCourier(suite.testUser.ID, req)

	suite.NoError(err)
	suite.NotNil(courier)
	suite.Equal(suite.testUser.ID, courier.UserID)
	suite.Equal("test@example.com", courier.Contact)
	suite.Equal("北京大学", courier.School)
	suite.Equal("pending", courier.Status)
	suite.Equal(1, courier.Level) // Default level 1

	// 验证数据库中存在记录
	var savedCourier models.Courier
	err = suite.db.First(&savedCourier, "user_id = ?", suite.testUser.ID).Error
	suite.NoError(err)
	suite.Equal(courier.ID, savedCourier.ID)
}

// TestApplyCourier_DuplicateApplication 测试重复申请
func (suite *CourierServiceTestSuite) TestApplyCourier_DuplicateApplication() {
	// 先申请一次
	req := &models.CourierApplication{
		Name:            "测试信使1",
		Contact:         "test1@example.com",
		School:          "北京大学",
		Zone:            "BJDX",
		HasPrinter:      "yes",
		SelfIntro:       "我想帮助同学传递信件",
		CanMentor:       "maybe",
		WeeklyHours:     10,
		MaxDailyTasks:   5,
		TransportMethod: "walk",
		TimeSlots:       []string{"morning"},
	}
	_, err := suite.courierService.ApplyCourier(suite.testUser.ID, req)
	suite.NoError(err)

	// 尝试重复申请
	req2 := &models.CourierApplication{
		Name:            "测试信使2",
		Contact:         "test2@example.com",
		School:          "清华大学",
		Zone:            "QH",
		HasPrinter:      "no",
		SelfIntro:       "再次申请",
		CanMentor:       "no",
		WeeklyHours:     8,
		MaxDailyTasks:   3,
		TransportMethod: "bike",
		TimeSlots:       []string{"evening"},
	}
	courier, err := suite.courierService.ApplyCourier(suite.testUser.ID, req2)

	suite.Error(err)
	suite.Nil(courier)
	suite.Contains(err.Error(), "已经申请过信使")
}

// TestApplyCourier_DuplicateContact 测试重复联系方式
func (suite *CourierServiceTestSuite) TestApplyCourier_DuplicateContact() {
	// 先申请一次
	req1 := &models.CourierApplication{
		Name:            "重复联系方式1",
		Contact:         "duplicate@example.com",
		School:          "北京大学",
		Zone:            "BJDX",
		HasPrinter:      "yes",
		SelfIntro:       "我想帮助同学传递信件",
		CanMentor:       "maybe",
		WeeklyHours:     10,
		MaxDailyTasks:   5,
		TransportMethod: "walk",
		TimeSlots:       []string{"morning"},
	}
	_, err := suite.courierService.ApplyCourier(suite.testUser.ID, req1)
	suite.NoError(err)

	// 创建另一个用户使用相同联系方式申请
	testUser2 := config.CreateTestUser(suite.db, "courieruser2", models.RoleUser)
	req2 := &models.CourierApplication{
		Name:            "重复联系方式2",
		Contact:         "duplicate@example.com", // 相同联系方式
		School:          "清华大学",
		Zone:            "QH",
		HasPrinter:      "no",
		SelfIntro:       "我也想申请",
		CanMentor:       "no",
		WeeklyHours:     8,
		MaxDailyTasks:   3,
		TransportMethod: "bike",
		TimeSlots:       []string{"afternoon"},
	}
	courier, err := suite.courierService.ApplyCourier(testUser2.ID, req2)

	suite.Error(err)
	suite.Nil(courier)
	suite.Contains(err.Error(), "该联系方式已被使用")
}

// TestGetCourierStatus_Success 测试获取信使状态
func (suite *CourierServiceTestSuite) TestGetCourierStatus_Success() {
	// 先申请成为信使
	courier := suite.createTestCourier()

	// 获取信使状态
	status, err := suite.courierService.GetCourierStatus(suite.testUser.ID)

	suite.NoError(err)
	suite.NotNil(status)
	suite.True(status.IsApplied)
	suite.Equal("pending", status.Status)
	suite.Equal(1, status.Level)
	suite.Equal("BJDX", status.Zone)
}

// TestGetCourierStatus_NotApplied 测试未申请用户
func (suite *CourierServiceTestSuite) TestGetCourierStatus_NotApplied() {
	// 获取未申请用户的状态
	status, err := suite.courierService.GetCourierStatus(suite.testUser.ID)

	suite.Error(err)
	suite.Nil(status)
	suite.Contains(err.Error(), "courier not found")
}

// TestApproveCourier_Success 测试审批通过信使
func (suite *CourierServiceTestSuite) TestApproveCourier_Success() {
	// 创建待审批的信使
	courier := suite.createTestCourier()

	// 审批通过
	// Convert courier ID string to uint for service call
	courierIDNum := uint(1) // This is a test approximation
	err := suite.courierService.ApproveCourier(courierIDNum)

	suite.NoError(err)

	// 验证状态更新
	var updatedCourier models.Courier
	err = suite.db.First(&updatedCourier, "id = ?", courier.ID).Error
	suite.NoError(err)
	suite.Equal("approved", updatedCourier.Status)

	// 验证用户角色更新
	var updatedUser models.User
	err = suite.db.First(&updatedUser, "id = ?", suite.testUser.ID).Error
	suite.NoError(err)
	suite.Equal(models.RoleCourierLevel1, updatedUser.Role)
}

// TestRejectCourier_Success 测试拒绝信使申请
func (suite *CourierServiceTestSuite) TestRejectCourier_Success() {
	// 创建待审批的信使
	courier := suite.createTestCourier()

	// 拒绝申请
	// Convert courier ID string to uint for service call
	courierIDNum := uint(1) // This is a test approximation
	err := suite.courierService.RejectCourier(courierIDNum)

	suite.NoError(err)

	// 验证状态更新
	var updatedCourier models.Courier
	err = suite.db.First(&updatedCourier, "id = ?", courier.ID).Error
	suite.NoError(err)
	suite.Equal("rejected", updatedCourier.Status)
}

// TestGetPendingApplications_Success 测试获取待审批申请
func (suite *CourierServiceTestSuite) TestGetPendingApplications_Success() {
	// 创建多个待审批申请
	for i := 0; i < 3; i++ {
		user := config.CreateTestUser(suite.db, "pending_user_"+string(rune(i)), models.RoleUser)
		req := &models.CourierApplication{
			Name:            "申请信使" + string(rune(i)),
			Contact:         "test" + string(rune(i)) + "@example.com",
			School:          "北京大学",
			Zone:            "BJDX",
			HasPrinter:      "yes",
			SelfIntro:       "申请成为信使",
			CanMentor:       "maybe",
			WeeklyHours:     10,
			MaxDailyTasks:   5,
			TransportMethod: "walk",
			TimeSlots:       []string{"morning"},
		}
		_, err := suite.courierService.ApplyCourier(user.ID, req)
		suite.NoError(err)
	}

	// 获取待审批申请
	applications, err := suite.courierService.GetPendingApplications()

	suite.NoError(err)
	suite.Len(applications, 3)
	for _, app := range applications {
		suite.Equal("pending", app.Status)
	}
}

// TestGetCouriersByZone_Success 测试按区域获取信使
func (suite *CourierServiceTestSuite) TestGetCouriersByZone_Success() {
	// 创建不同区域的信使
	zones := []string{"BJDX", "QH", "BJDX"}
	for i, zone := range zones {
		user := config.CreateTestUser(suite.db, "zone_user_"+string(rune(i)), models.RoleUser)
		req := &models.CourierApplication{
			Name:            "区域信使" + string(rune(i)),
			Contact:         "zone" + string(rune(i)) + "@example.com",
			School:          zone,
			Zone:            zone,
			HasPrinter:      "yes",
			SelfIntro:       "申请成为信使",
			CanMentor:       "maybe",
			WeeklyHours:     10,
			MaxDailyTasks:   5,
			TransportMethod: "walk",
			TimeSlots:       []string{"morning"},
		}
		courier, err := suite.courierService.ApplyCourier(user.ID, req)
		suite.NoError(err)
		// 审批通过
		// Convert courier ID string to uint for service call
		courierIDNum := uint(1) // This is a test approximation
		err = suite.courierService.ApproveCourier(courierIDNum)
		suite.NoError(err)
	}

	// 获取BJDX区域的信使
	couriers, err := suite.courierService.GetCouriersByZone("BJDX")

	suite.NoError(err)
	suite.Len(couriers, 2) // 应该有2个BJDX区域的信使
	for _, courier := range couriers {
		suite.Equal("BJDX", courier.Zone)
		suite.Equal("approved", courier.Status)
	}
}

// TestAddPoints_Success 测试添加积分
func (suite *CourierServiceTestSuite) TestAddPoints_Success() {
	// 创建并审批通过信使
	_ = suite.createApprovedCourier()

	// 添加积分
	// Convert courier ID string to uint for service call
	courierIDNum := uint(1) // This is a test approximation
	err := suite.courierService.AddPoints(courierIDNum, 50)

	suite.NoError(err)

	// 验证积分更新
	var updatedCourier models.Courier
	err = suite.db.First(&updatedCourier, "id = ?", courier.ID).Error
	suite.NoError(err)
	suite.Equal(50, updatedCourier.Points)
}

// TestGetCourierStats_Success 测试获取信使统计
func (suite *CourierServiceTestSuite) TestGetCourierStats_Success() {
	// 创建不同状态的信使
	statuses := []string{
		"pending",
		"approved",
		"approved",
		"rejected",
	}

	for i, status := range statuses {
		user := config.CreateTestUser(suite.db, "stats_user_"+string(rune(i)), models.RoleUser)
		req := &models.CourierApplication{
			Name:            "统计信使" + string(rune(i)),
			Contact:         "stats" + string(rune(i)) + "@example.com",
			School:          "北京大学",
			Zone:            "BJDX",
			HasPrinter:      "yes",
			SelfIntro:       "申请成为信使",
			CanMentor:       "maybe",
			WeeklyHours:     10,
			MaxDailyTasks:   5,
			TransportMethod: "walk",
			TimeSlots:       []string{"morning"},
		}
		courier, err := suite.courierService.ApplyCourier(user.ID, req)
		suite.NoError(err)

		if status == "approved" {
			courierIDNum := uint(i + 1) // This is a test approximation
			err = suite.courierService.ApproveCourier(courierIDNum)
			suite.NoError(err)
		} else if status == "rejected" {
			courierIDNum := uint(i + 1) // This is a test approximation
			err = suite.courierService.RejectCourier(courierIDNum)
			suite.NoError(err)
		}
	}

	// 获取统计信息
	stats, err := suite.courierService.GetCourierStats()

	suite.NoError(err)
	suite.NotNil(stats)
	suite.Equal(int64(1), stats["pending_count"])
	suite.Equal(int64(2), stats["approved_count"])
	suite.Equal(int64(1), stats["rejected_count"])
	suite.Equal(int64(4), stats["total_count"])
}

// TestCreateSubordinateCourier_Success 测试创建下级信使
func (suite *CourierServiceTestSuite) TestCreateSubordinateCourier_Success() {
	// 创建一个高级信使
	parentCourier := config.CreateTestUser(suite.db, "parent_courier", models.RoleCourierLevel2)
	
	// 创建下级信使请求
	req := &models.CreateCourierRequest{
		Username: "subordinate_courier",
		Email:    "sub@example.com",
		Level:    1,
		Region:   "BJDX",
		School:   "北京大学",
		Zone:     "BJDX-A",
	}

	// 创建下级信使
	newUser, err := suite.courierService.CreateSubordinateCourier(parentCourier, req)

	suite.NoError(err)
	suite.NotNil(newUser)
	suite.Equal("subordinate_courier", newUser.Username)
	suite.Equal("sub@example.com", newUser.Email)
	suite.Equal(models.RoleCourierLevel1, newUser.Role)

	// 验证信使记录
	var courier models.Courier
	err = suite.db.First(&courier, "user_id = ?", newUser.ID).Error
	suite.NoError(err)
	suite.Equal(1, courier.Level)
	suite.Equal("BJDX-A", courier.Zone)
	suite.Equal("approved", courier.Status)
	suite.True(courier.IsActive)
}

// TestCreateSubordinateCourier_InsufficientLevel 测试等级不足
func (suite *CourierServiceTestSuite) TestCreateSubordinateCourier_InsufficientLevel() {
	// 创建一个1级信使（不能创建下级）
	parentCourier := config.CreateTestUser(suite.db, "low_level_courier", models.RoleCourierLevel1)
	
	req := &models.CreateCourierRequest{
		Username: "sub_courier",
		Email:    "test@example.com",
		Level:    1,
		Region:   "BJDX",
		School:   "测试学校",
		Zone:     "BJDX-A",
	}

	// 尝试创建下级信使
	newUser, err := suite.courierService.CreateSubordinateCourier(parentCourier, req)

	suite.Error(err)
	suite.Nil(newUser)
	suite.Contains(err.Error(), "无权限创建该等级的信使")
}

// TestGetSubordinateCouriers_Success 测试获取下级信使
func (suite *CourierServiceTestSuite) TestGetSubordinateCouriers_Success() {
	// 创建高级信使
	parentCourier := config.CreateTestUser(suite.db, "parent_manager", models.RoleCourierLevel3)
	
	// 创建多个下级信使
	for i := 0; i < 3; i++ {
		req := &models.CreateCourierRequest{
			Username: "sub_courier_" + string(rune(i)),
			Email:    "sub" + string(rune(i)) + "@example.com",
			Level:    2,
			Region:   "BJDX",
			School:   "北京大学",
			Zone:     "BJDX-" + string(rune(i)),
		}
		_, err := suite.courierService.CreateSubordinateCourier(parentCourier, req)
		suite.NoError(err)
	}

	// 获取下级信使
	subordinates, err := suite.courierService.GetSubordinateCouriers(parentCourier.ID)

	suite.NoError(err)
	suite.Len(subordinates, 3)
	for _, sub := range subordinates {
		suite.Equal(2, sub.Level)
		suite.Equal(models.RoleCourierLevel2, sub.Role)
	}
}

// TestValidateOPCodeAccess_Success 测试OP码访问权限验证
func (suite *CourierServiceTestSuite) TestValidateOPCodeAccess_Success() {
	// 创建2级信使，管理BJDX区域
	_ = suite.createApprovedCourier()
	courier.Level = 2
	courier.Zone = "BJDX"
	suite.db.Save(courier)

	// 测试访问权限
	valid, err := suite.courierService.ValidateOPCodeAccess(courier.UserID, "BJDX5F")

	suite.NoError(err)
	suite.True(valid)
}

// TestValidateOPCodeAccess_Denied 测试OP码访问权限拒绝
func (suite *CourierServiceTestSuite) TestValidateOPCodeAccess_Denied() {
	// 创建1级信使，管理BJDX区域
	_ = suite.createApprovedCourier()
	courier.Level = 1
	courier.Zone = "BJDX5F01"
	suite.db.Save(courier)

	// 测试访问其他区域的权限（应该被拒绝）
	valid, err := suite.courierService.ValidateOPCodeAccess(courier.UserID, "QH3A02")

	suite.NoError(err)
	suite.False(valid)
}

// Helper methods

func (suite *CourierServiceTestSuite) createTestCourier() *models.Courier {
	req := &models.CourierApplication{
		Name:            "测试信使",
		Contact:         "test@example.com",
		School:          "北京大学",
		Zone:            "BJDX",
		HasPrinter:      "yes",
		SelfIntro:       "测试申请",
		CanMentor:       "maybe",
		WeeklyHours:     10,
		MaxDailyTasks:   5,
		TransportMethod: "walk",
		TimeSlots:       []string{"morning"},
	}
	courier, err := suite.courierService.ApplyCourier(suite.testUser.ID, req)
	suite.NoError(err)
	return courier
}

func (suite *CourierServiceTestSuite) createApprovedCourier() *models.Courier {
	courier := suite.createTestCourier()
	err := suite.courierService.ApproveCourier(courier.ID)
	suite.NoError(err)
	
	// 重新获取更新后的信使
	err = suite.db.First(courier, "id = ?", courier.ID).Error
	suite.NoError(err)
	
	return courier
}

// 运行测试套件
func TestCourierServiceSuite(t *testing.T) {
	suite.Run(t, new(CourierServiceTestSuite))
}