# OpenPenPal Go Linter Configuration - SOTA Standards
# Optimized for production quality and performance

run:
  timeout: 5m
  issues-exit-code: 1
  tests: true
  skip-dirs:
    - vendor
    - tmp
    - uploads
    - logs
    - test_*

output:
  format: colored-line-number
  print-issued-lines: true
  print-linter-name: true

linters-settings:
  govet:
    check-shadowing: true
  golint:
    min-confidence: 0
  gocyclo:
    min-complexity: 15
  maligned:
    suggest-new: true
  dupl:
    threshold: 100
  goconst:
    min-len: 2
    min-occurrences: 2
  misspell:
    locale: US
  lll:
    line-length: 140
  goimports:
    local-prefixes: openpenpal-backend
  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral
      - whyNoLint
      - wrapperFunc
  funlen:
    lines: 100
    statements: 50

linters:
  # Use modern linters, remove deprecated ones
  disable-all: true
  enable:
    - bodyclose
    - depguard
    - dogsled
    - dupl
    - errcheck
    - exportloopref
    - funlen
    - gochecknoinits
    - goconst
    - gocritic
    - gocyclo
    - gofmt
    - goimports
    - goprintffuncname
    - gosec
    - gosimple
    - govet
    - ineffassign
    - lll
    - misspell
    - nakedret
    - noctx
    - nolintlint
    - revive
    - rowserrcheck
    - staticcheck
    - stylecheck
    - typecheck
    - unconvert
    - unparam
    - unused
    - whitespace

issues:
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    - path: _test\.go
      linters:
        - gomnd
        - funlen
        - goconst

    # https://github.com/go-critic/go-critic/issues/926
    - linters:
        - gocritic
      text: "unnecessaryDefer:"

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  new: false

  # Show only new issues created after git revision `REV`
  # new-from-rev: REV

  # Show only new issues created in git patch with set file path.
  # new-from-patch: path/to/patch/file

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is 3.
  max-same-issues: 0

  # List of regexps of issue texts to exclude, empty list by default.
  exclude:
    # EXC0001 errcheck: Almost all programs ignore errors on these functions and in most cases it's ok
    - Error return value of .((os\.)?std(out|err)\..*|.*Close|.*Flush|os\.Remove(All)?|.*print.*|os\.(Un)?Setenv). is not checked

    # EXC0002 golint: Annoying issue about not having a comment. The rare codebase has such comments
    - (comment on exported (method|function|type|const)|should have( a package)? comment|comment should be of the form)

    # EXC0003 golint: False positive when tests are defined in package 'test'
    - func name will be used as test\.Test.* by other packages, and that stutters; consider calling this

    # EXC0004 govet: Common false positives
    - (possible misuse of unsafe.Pointer|should have signature)

    # EXC0005 staticcheck: Developers tend to write in C-style with an explicit 'break' in a 'switch', so it's ok to ignore
    - SA4022

    # EXC0006 gosec: Too many false-positives on 'unsafe' usage
    - G103

    # EXC0007 gosec: Too many false-positives for parametrized shell calls
    - G204

    # EXC0008 gosec: Duplicated errcheck checks
    - G104

    # EXC0009 gosec: Too many issues in popular repos
    - (G301|G302|G307)

    # EXC0010 gosec: False positive is triggered by 'src, err := ioutil.ReadFile(filename)'
    - G304

    # EXC0011 stylecheck: Annoying issue about not having a comment. The rare codebase has such comments
    - (ST1000|ST1003|ST1016|ST1020|ST1021|ST1022)

    # EXC0012 revive: Annoying issue about not having a comment. The rare codebase has such comments
    - exported (.+) should have comment( \(.+\))? or be unexported

    # EXC0013 revive: Annoying issue about not having a comment. The rare codebase has such comments
    - package-comments

    # EXC0014 revive: Annoying issue about not having a comment. The rare codebase has such comments
    - comment on exported (.+) should be of the form "(.+)..."

    # EXC0015 revive: Annoying issue about not having a comment. The rare codebase has such comments
    - should have a package comment, unless it's in another file for this package

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: false

  # The default value is false. If set to true exclude and exclude-rules
  # regular expressions become case sensitive.
  exclude-case-sensitive: false

  # If set to true exclude and exclude-rules regular expressions are using POSIX ERE syntax.
  exclude-posix-ere: false