# OpenPenPal Frontend生产环境Dockerfile
# 多阶段构建优化

# ========================
# 第一阶段: 依赖安装
# ========================
FROM node:18-alpine AS deps

# 安装系统依赖
RUN apk add --no-cache libc6-compat

WORKDIR /app

# 复制依赖文件
COPY frontend/package.json frontend/package-lock.json ./

# 安装依赖（仅生产依赖）
RUN npm ci --only=production && npm cache clean --force

# ========================
# 第二阶段: 构建阶段
# ========================
FROM node:18-alpine AS builder

WORKDIR /app

# 复制依赖
COPY --from=deps /app/node_modules ./node_modules

# 复制源代码
COPY frontend/ .

# 设置环境变量
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# 构建应用
RUN npm run build

# ========================
# 第三阶段: 运行时环境
# ========================
FROM node:18-alpine AS runner

WORKDIR /app

# 创建非root用户
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# 设置环境变量
ENV NODE_ENV=production
ENV NEXT_TELEMETRY_DISABLED=1

# 复制必要文件
COPY --from=builder /app/public ./public
COPY --from=builder /app/package.json ./package.json

# 复制构建产物（设置正确的所有权）
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# 切换到非root用户
USER nextjs

# 暴露端口
EXPOSE 3000

ENV PORT=3000
ENV HOSTNAME="0.0.0.0"

# 健康检查
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/health || exit 1

# 启动应用
CMD ["node", "server.js"]