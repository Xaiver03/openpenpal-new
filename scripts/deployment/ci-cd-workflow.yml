# OpenPenPal CI/CD 工作流
# 用于GitHub Actions的持续集成和部署

name: OpenPenPal CI/CD

on:
  # 触发条件
  push:
    branches: [main, develop]
    tags: [v*]
  pull_request:
    branches: [main, develop]
  
  # 手动触发
  workflow_dispatch:
    inputs:
      environment:
        description: '部署环境'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      skip_tests:
        description: '跳过测试'
        required: false
        default: false
        type: boolean

# 环境变量
env:
  NODE_VERSION: '18'
  GO_VERSION: '1.21'
  DOCKER_REGISTRY: 'ghcr.io'
  IMAGE_NAME: 'openpenpal'

# 任务定义
jobs:
  # 代码检查和测试
  quality-check:
    name: 代码质量检查
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 设置Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache-dependency-path: backend/go.sum

    - name: 安装前端依赖
      working-directory: frontend
      run: npm ci --prefer-offline --no-audit

    - name: 前端代码检查
      working-directory: frontend
      run: |
        npm run type-check
        npm run lint

    - name: 后端代码检查
      working-directory: backend
      run: |
        go mod download
        go vet ./...
        go fmt -d .
        
    - name: 安装golangci-lint
      run: |
        curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.54.2
        echo "$(go env GOPATH)/bin" >> $GITHUB_PATH

    - name: 运行golangci-lint
      working-directory: backend
      run: golangci-lint run --timeout 5m

  # 单元测试
  unit-tests:
    name: 单元测试
    runs-on: ubuntu-latest
    if: ${{ !inputs.skip_tests }}
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: openpenpal_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 设置Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache-dependency-path: backend/go.sum

    - name: 安装前端依赖
      working-directory: frontend
      run: npm ci --prefer-offline --no-audit

    - name: 前端单元测试
      working-directory: frontend
      run: npm run test:ci
      env:
        CI: true

    - name: 后端单元测试
      working-directory: backend
      run: go test ./... -race -coverprofile=coverage.out -covermode=atomic
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/openpenpal_test
        REDIS_URL: redis://localhost:6379/1
        JWT_SECRET: test-secret-for-ci-testing-only

    - name: 上传测试覆盖率
      uses: codecov/codecov-action@v3
      with:
        file: backend/coverage.out
        flags: backend

  # 安全扫描
  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: 前端依赖安全扫描
      working-directory: frontend
      run: |
        npm ci --prefer-offline --no-audit
        npm audit --audit-level moderate

    - name: 设置Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache-dependency-path: backend/go.sum

    - name: 后端依赖安全扫描
      working-directory: backend
      run: |
        go mod download
        go install github.com/sonatypecommunity/nancy@latest
        go list -json -m all | nancy sleuth

    - name: CodeQL分析
      uses: github/codeql-action/init@v2
      with:
        languages: go, javascript

    - name: CodeQL自动构建
      uses: github/codeql-action/autobuild@v2

    - name: CodeQL分析结果
      uses: github/codeql-action/analyze@v2

  # 构建Docker镜像
  build-images:
    name: 构建Docker镜像
    runs-on: ubuntu-latest
    needs: [quality-check, unit-tests]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/tags/v')
    
    outputs:
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      backend-image: ${{ steps.meta-backend.outputs.tags }}
      version: ${{ steps.meta.outputs.version }}

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 登录到容器注册表
      uses: docker/login-action@v3
      with:
        registry: ${{ env.DOCKER_REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: 提取元数据
      id: meta
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        elif [[ $GITHUB_REF == refs/heads/main ]]; then
          VERSION="latest"
        else
          VERSION="develop"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: 前端镜像元数据
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 后端镜像元数据
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ github.repository_owner }}/${{ env.IMAGE_NAME }}-backend
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}

    - name: 构建并推送前端镜像
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        build-args: |
          BUILD_VERSION=${{ steps.meta.outputs.version }}
          BUILD_TIME=${{ github.run_number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: 构建并推送后端镜像
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        build-args: |
          BUILD_VERSION=${{ steps.meta.outputs.version }}
          BUILD_TIME=${{ github.run_number }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 镜像安全扫描
  image-scan:
    name: 镜像安全扫描
    runs-on: ubuntu-latest
    needs: [build-images]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')

    steps:
    - name: 运行Trivy扫描前端镜像
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-images.outputs.frontend-image }}
        format: 'sarif'
        output: 'frontend-trivy-results.sarif'

    - name: 运行Trivy扫描后端镜像
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: ${{ needs.build-images.outputs.backend-image }}
        format: 'sarif'
        output: 'backend-trivy-results.sarif'

    - name: 上传Trivy扫描结果
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: '.'

  # 集成测试
  integration-tests:
    name: 集成测试
    runs-on: ubuntu-latest
    needs: [build-images]
    if: ${{ !inputs.skip_tests }}

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 设置测试环境
      run: |
        cp scripts/deployment/docker-compose.production.yml docker-compose.test.yml
        # 使用新构建的镜像
        sed -i "s|openpenpal-frontend:.*|${{ needs.build-images.outputs.frontend-image }}|g" docker-compose.test.yml
        sed -i "s|openpenpal-backend:.*|${{ needs.build-images.outputs.backend-image }}|g" docker-compose.test.yml

    - name: 启动测试服务
      run: |
        docker-compose -f docker-compose.test.yml up -d postgres redis
        sleep 30

    - name: 运行数据库迁移
      run: |
        docker-compose -f docker-compose.test.yml run --rm backend ./scripts/wait-for-postgres.sh postgres:5432
        docker-compose -f docker-compose.test.yml run --rm backend go run main.go migrate

    - name: 启动应用服务
      run: |
        docker-compose -f docker-compose.test.yml up -d backend frontend
        sleep 60

    - name: 健康检查
      run: |
        curl -f http://localhost:8080/healthz
        curl -f http://localhost:3000

    - name: 运行API测试
      run: |
        # 安装测试工具
        npm install -g dredd newman
        # 运行API合同测试
        dredd openapi.yaml http://localhost:8080 || true

    - name: 停止测试服务
      if: always()
      run: |
        docker-compose -f docker-compose.test.yml logs
        docker-compose -f docker-compose.test.yml down -v

  # 部署到预发布环境
  deploy-staging:
    name: 部署到预发布环境
    runs-on: ubuntu-latest
    needs: [build-images, integration-tests]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && inputs.environment == 'staging')
    environment: staging

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 配置kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.STAGING_KUBECONFIG }}

    - name: 部署到Kubernetes
      run: |
        # 更新部署配置中的镜像版本
        sed -i "s|FRONTEND_IMAGE|${{ needs.build-images.outputs.frontend-image }}|g" deploy/k8s/staging/*.yaml
        sed -i "s|BACKEND_IMAGE|${{ needs.build-images.outputs.backend-image }}|g" deploy/k8s/staging/*.yaml
        
        # 应用配置
        kubectl apply -f deploy/k8s/staging/
        
        # 等待部署完成
        kubectl rollout status deployment/openpenpal-frontend -n staging --timeout=300s
        kubectl rollout status deployment/openpenpal-backend -n staging --timeout=300s

    - name: 验证部署
      run: |
        # 获取服务地址
        FRONTEND_URL=$(kubectl get service openpenpal-frontend -n staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        BACKEND_URL=$(kubectl get service openpenpal-backend -n staging -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        
        # 健康检查
        curl -f "http://${BACKEND_URL}:8080/healthz"
        curl -f "http://${FRONTEND_URL}:3000"

  # 部署到生产环境
  deploy-production:
    name: 部署到生产环境
    runs-on: ubuntu-latest
    needs: [build-images, integration-tests, image-scan]
    if: startsWith(github.ref, 'refs/tags/v') || (github.event_name == 'workflow_dispatch' && inputs.environment == 'production')
    environment: production

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 人工审批检查
      uses: hmarr/auto-approve-action@v3
      if: github.event_name == 'workflow_dispatch'

    - name: 配置kubectl
      uses: azure/k8s-set-context@v3
      with:
        method: kubeconfig
        kubeconfig: ${{ secrets.PRODUCTION_KUBECONFIG }}

    - name: 数据库备份
      run: |
        # 执行数据库备份
        kubectl exec deployment/postgres -n production -- pg_dump $DATABASE_URL > backup-$(date +%Y%m%d-%H%M%S).sql

    - name: 蓝绿部署
      run: |
        # 更新部署配置
        sed -i "s|FRONTEND_IMAGE|${{ needs.build-images.outputs.frontend-image }}|g" deploy/k8s/production/*.yaml
        sed -i "s|BACKEND_IMAGE|${{ needs.build-images.outputs.backend-image }}|g" deploy/k8s/production/*.yaml
        
        # 部署新版本（绿环境）
        kubectl apply -f deploy/k8s/production/
        
        # 等待新版本就绪
        kubectl rollout status deployment/openpenpal-frontend-green -n production --timeout=600s
        kubectl rollout status deployment/openpenpal-backend-green -n production --timeout=600s
        
        # 健康检查
        sleep 30
        kubectl exec deployment/openpenpal-backend-green -n production -- curl -f http://localhost:8080/healthz
        
        # 切换流量到绿环境
        kubectl patch service openpenpal-frontend -n production -p '{"spec":{"selector":{"version":"green"}}}'
        kubectl patch service openpenpal-backend -n production -p '{"spec":{"selector":{"version":"blue"}}}'
        
        # 等待验证
        sleep 60
        
        # 删除蓝环境
        kubectl delete deployment openpenpal-frontend-blue openpenpal-backend-blue -n production || true

    - name: 部署后验证
      run: |
        # 生产环境健康检查
        FRONTEND_URL=${{ secrets.PRODUCTION_FRONTEND_URL }}
        BACKEND_URL=${{ secrets.PRODUCTION_BACKEND_URL }}
        
        curl -f "${BACKEND_URL}/healthz"
        curl -f "${FRONTEND_URL}"
        
        # 关键API测试
        curl -f "${BACKEND_URL}/api/v1/health"

    - name: 通知部署结果
      uses: 8398a7/action-slack@v3
      if: always()
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
        text: |
          OpenPenPal ${{ needs.build-images.outputs.version }} 部署到生产环境 ${{ job.status }}
          
  # 性能测试
  performance-test:
    name: 性能测试
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/develop'

    steps:
    - name: 检出代码
      uses: actions/checkout@v4

    - name: 安装k6
      run: |
        sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
        echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
        sudo apt-get update
        sudo apt-get install k6

    - name: 运行性能测试
      run: |
        # 配置测试目标
        export TARGET_URL=${{ secrets.STAGING_URL }}
        
        # 运行负载测试
        k6 run --out json=performance-results.json scripts/k6/load-test.js
        
        # 运行压力测试
        k6 run --out json=stress-results.json scripts/k6/stress-test.js

    - name: 上传性能测试结果
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: '*-results.json'

  # 清理资源
  cleanup:
    name: 清理资源
    runs-on: ubuntu-latest
    needs: [deploy-production, deploy-staging]
    if: always()

    steps:
    - name: 清理旧镜像
      run: |
        # 保留最近10个版本的镜像
        # 实际实现需要调用容器注册表API
        echo "清理旧Docker镜像..."

    - name: 清理工作空间
      run: |
        docker system prune -f
        rm -rf ${{ github.workspace }}/*